import { AxiosResponse } from 'axios'
import { GetServerSidePropsContext } from 'next'
import Head from 'next/head'
import React from 'react'
import Tabs from '../../components/Tabs'
import { fetchArticles, fetchCategories } from '../../http'
import { IArticle, ICategory, ICollectionResponse, IPagination } from '../../types'
import qs from 'qs'
import ArticleList from '../../components/ArticleList'
import Pagination from '../../components/Pagination'
import { capitalizeFirstLatter, makeCategory } from '../../utils'

interface IPropTypes {
    categories: {
        items: ICategory[],
        pagination: IPagination
    },
    articles: {
        items: IArticle[]
    },
    slug: string
}


export default function Category({ categories, articles, slug }: IPropTypes) {
    const formatedCategory = (slug: string) => {
        return makeCategory(slug)
    }

    return (
        <>
            <Head>
                <title>My Blog {formatedCategory(slug)}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Tabs categories={categories.items} />
            <ArticleList articles={articles.items} />
            <Pagination />
        </>
    )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
    const options = {
        populate: ['author.avatar'],
        sort: ['id:desc'],
        filters: {
            Category: {
                slug: context.query.category,
            },
        },
    }

    const queryString = qs.stringify(options)

    const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)

    const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()

    return {
        props: {
            categories: {
                items: categories.data
            },
            articles: {
                items: articles.data,
                pagination: articles.meta.pagination
            },
            slug: context.query.category
        }
    }
}