import Head from 'next/head'
import React from 'react'
import Tabs from '../../components/Tabs'
import { IArticle, ICategory, IPagination } from '../../types'
import ArticleList from '../../components/ArticleList'
import Pagination from '../../components/Pagination'
import { debounce, makeCategory } from '../../utils'
import { useRouter } from 'next/router'
import { fetchCategories } from '../../redux/slices/categories'
import { fetchArticles } from '../../redux/slices/articles'
import { RootState, wrapper } from '../../redux/store'
import { useSelector } from 'react-redux'

interface IPropTypes {
    categories: {
        items: ICategory[]
    },
    articles: {
        items: IArticle[],
        pagination: IPagination
    },
    slug: string
}

export default function Category({ slug }: IPropTypes) {
    const { data: categories } = useSelector((state: RootState) => state.categories)
    const { data: articles } = useSelector((state: RootState) => state.articles)
    const router = useRouter();
    const { category: categorySlug } = router.query;

    const page = articles?.meta.pagination.page
    const pageCount = articles?.meta.pagination.pageCount

    const formatedCategory = (slug: string) => {
        return makeCategory(slug)
    }

    const handleSearch = (query: string) => {
        router.push(`/category/${categorySlug}/?search=${query}`)
    }

    return (
        <>
            <Head>
                <title>My Blog {formatedCategory(slug)}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {categories &&
                <Tabs
                    categories={categories}
                    handleSearch={debounce(handleSearch, 500)}
                />
            }
            {articles &&
                <ArticleList
                    articles={articles?.data}
                />
            }
            <div className={`${pageCount == 0 ? 'hidden' : 'block'}`}>
                {page && pageCount &&
                    <Pagination
                        page={page}
                        pageCount={pageCount}
                    />
                }
            </div>
        </>
    )
}

export const getServerSideProps = wrapper.getServerSideProps(store => async ({ query }) => {
    await store.dispatch(fetchCategories())
    await store.dispatch(fetchArticles(query))

    return {
        props: {
            slug: query.category
        }
    }
})
