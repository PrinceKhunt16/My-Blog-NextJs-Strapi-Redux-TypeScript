import { AxiosResponse } from 'axios'
import { GetServerSidePropsContext } from 'next'
import Head from 'next/head'
import ArticleList from '../components/ArticleList'
import Tabs from '../components/Tabs'
import { fetchArticles, fetchCategories } from '../http'
import { IArticle, ICategory, ICollectionResponse, IPagination } from '../types'
import qs from 'qs'
import Pagination from '../components/Pagination'

interface IPropTypes {
  categories: {
    items: ICategory[]
  },
  articles: {
    items: IArticle[]
    pagination: IPagination
  },
}

export default function Home({ categories, articles }: IPropTypes) {
  const { page, pageCount } = articles.pagination

  return (
    <div>
      <Head>
        <title>My Blog Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categories={categories.items} />
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </div>
  )
}

export async function getServerSideProps (context: GetServerSidePropsContext) {
  const options = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: context.query.page ? context.query.page : 1,
      pageSize: 1
    }
  }

  const queryString = qs.stringify(options)
  
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()
  
  return {
    props: {
      categories: {
        items: categories.data
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      }
    }
  }
}