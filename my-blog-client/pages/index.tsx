import Head from 'next/head'
import ArticleList from '../components/ArticleList'
import Tabs from '../components/Tabs'
import Pagination from '../components/Pagination'
import { useRouter } from 'next/router'
import { debounce } from '../utils'
import { useDispatch, useSelector } from 'react-redux'
import { AppDispatch, RootState, wrapper } from '../redux/store'
import { fetchCategories } from '../redux/slices/categories'
import { fetchArticles } from '../redux/slices/articles'
import { useEffect } from 'react'
import { setDefaultSignIn } from '../redux/slices/signin'
import { fetchUser } from '../redux/slices/user'
import { setDefaultWrite } from '../redux/slices/write'

export default function Home() {
  const router = useRouter()
  const dispath = useDispatch<AppDispatch>()
  const { data: categories } = useSelector((state: RootState) => state.categories)
  const { data: articles } = useSelector((state: RootState) => state.articles)
  const { isSignedIn } = useSelector((state: RootState) => state.signin)
  const { isSignedUp } = useSelector((state: RootState) => state.signup)
  const { writtenDown } = useSelector((state: RootState) => state.write)

  const page = articles?.meta.pagination.page
  const pageCount = articles?.meta.pagination.pageCount

  useEffect(() => {
    if (isSignedIn || isSignedUp) {
      dispath(setDefaultSignIn())
      dispath(fetchUser())
    }
    
    if(writtenDown){
      dispath(setDefaultWrite())
    }
  }, [isSignedIn, isSignedUp, writtenDown])

  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`)
  }

  return (
    <div>
      <Head>
        <title>My Blog Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {categories &&
        <Tabs
          categories={categories}
          handleSearch={debounce(handleSearch, 500)}
        />
      }
      {articles &&
        <ArticleList
          articles={articles?.data}
        />
      }
      {page && pageCount &&
        <Pagination
          page={page}
          pageCount={pageCount}
        />
      }
    </div>
  )
}

export const getServerSideProps = wrapper.getServerSideProps(store => async ({ query }) => {
  await store.dispatch(fetchCategories())
  await store.dispatch(fetchArticles(query))

  return {
    props: {}
  }
})