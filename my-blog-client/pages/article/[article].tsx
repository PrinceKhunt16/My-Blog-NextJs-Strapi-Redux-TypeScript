import Head from "next/head"
import { formatDate } from "../../utils"
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote';
import { RootState, wrapper } from "../../redux/store"
import { fetchArticle, fetchArticlesOfUser } from "../../redux/slices/article"
import { useSelector } from "react-redux"
import { serialize } from "next-mdx-remote/serialize";
import Link from "next/link";

interface IPropType {
    body: MDXRemoteSerializeResult
}

export default function Article({ body }: IPropType) {
    const { data, usersData } = useSelector((state: RootState) => state.article)

    return (
        <>
            <Head>
                <title>{data?.attributes.Title}</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="mb-7 mt-7 grid lg:grid-cols-3 md:grid-cols-2 lg:gap-7 md:gap-0 single-article">
                <div className="lg:col-span-2 pb-5 md:col-span-2">
                    <h1 className="tracking-[0.4px] text-[28px] xl:text-[30px] leading-[35px] font-caveatbrush text-gray-600">
                        {data?.attributes.Title}
                    </h1>
                    <div className="text-base text-gray-600 leading-7">
                        <img
                            className="w-full pt-5"
                            src={`http://localhost:1337${data?.attributes.imageurl}`}
                            alt={data?.attributes.Title}
                        />
                        <div className="pt-6 mdxremote text-gray-600 tracking-[0.4px]">
                            <MDXRemote {...(body as MDXRemoteSerializeResult)} />
                        </div>
                    </div>
                </div>
                <div className="lg:col-span-1 md:col-span-2">
                    <div className="lg:pl-7 lg:border-l lg:border-t-0 border-t lg:pt-0 pt-7 w-full h-full flex flex-col">
                        <div className="flex items-center justify-start">
                            <img
                                src={`http://localhost:1337${data?.attributes.author.data.attributes.avatarurl}`}
                                alt={data?.attributes.Title}
                                className="h-20 w-20 object-cover rounded-full"
                            />
                            <div>
                                <h1 className="tracking-[0.2px] ml-3 font-caveatbrush text-2xl text-gray-600">{data?.attributes.author.data.attributes.username}</h1>
                            </div>
                        </div>
                        <div className="mt-4 w-full">
                            <div className="pb-2 tracking-[0.3px]">
                                <p className="text-gray-600">{data?.attributes.author.data.attributes.about}</p>
                                <p className="text-gray-600">This blog written by {data?.attributes.author.data.attributes.username} on {data && formatDate(data?.attributes.createdAt)} and below his more blogs.</p>
                            </div>
                            <div className="flex flex-col">
                                { usersData?.data &&
                                    usersData?.data.map((blog) => {
                                        return (
                                            <div key={blog.attributes.Slug}>
                                                {blog.attributes.Slug !== data?.attributes.Slug &&
                                                    <div className="gap-2 py-2">
                                                        <img className="object-cover w-full h-[180px]" src={`http://localhost:1337${blog.attributes.imageurl}`} alt="" />
                                                        <div>
                                                            <Link href={`/article/${blog.attributes.Slug}`}>
                                                                <h1 className="tracking-[0.2px] text-[26px] pt-1 leading-[30px] font-normal font-caveatbrush text-gray-600 hover:text-primary transition-transform hover:cursor-pointer hover:decoration-gray-500">{blog.attributes.Title}</h1>
                                                            </Link>
                                                            <div className="tracking-[0.3px] text-gray-600 leading-[24px] pt-1">
                                                                {blog.attributes.shortDescription.slice(0, 100)}{' '}
                                                                {blog.attributes.shortDescription.length > 100 ? <span className="text-gray-600">read more</span> : ''}
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        )
                                    })
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}

export const getServerSideProps = wrapper.getServerSideProps(store => async ({query}) => {
    const data = await store.dispatch(fetchArticle(query))
    await store.dispatch(fetchArticlesOfUser())

    return {
        props: {
            body: await serialize(data.payload.attributes.Body as string)
        }
    }
})