import axios, { AxiosResponse } from "axios"
import { GetServerSidePropsContext } from "next"
import { IArticle, ICollectionResponse } from "../../types"
import qs from "qs"
import Head from "next/head"
import { formatDate, serializeMarkdown } from "../../utils"
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote';
import DisplayMoreArticle from "../../components/DisplayMoreArticle"

interface IPropTypes {
    article: IArticle,
    notFound?: boolean
}

export default function Article({ article, notFound = false }: IPropTypes) {
    return (
        <>
            <Head>
                <title>{article.attributes.Title}</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="mb-7 mt-4 grid lg:grid-cols-3 md:grid-cols-2 lg:gap-12 md:gap-0 single-article">
                <div className="lg:col-span-2 md:col-span-2">
                    <h1 className="text-[40px] font-caveatbrush text-gray-600 leading-[45px]">
                        {article.attributes.Title}
                    </h1>
                    <div className="text-lg text-gray-600 leading-7">
                        <img
                            className="w-full pt-5"
                            src={`http://localhost:1337${article.attributes.imageurl}`}
                            alt={article.attributes.Title}
                        />
                        <div className="pt-6 mdxremote">
                            <MDXRemote {...(article.attributes.Body) as MDXRemoteSerializeResult} />
                        </div>
                    </div>
                </div>
                <div className="lg:col-span-1 md:col-span-2 pt-7">
                    <div className="p-5 w-full flex flex-col bg-[#53bd9510]">
                        <div className="flex items-center justify-start">
                            <img
                                src={`http://localhost:1337${article.attributes.author.data.attributes.avatarurl}`}
                                alt={article.attributes.Title}
                                className="h-20 w-20 object-cover rounded-full"
                            />
                            <div>
                                <h1 className="ml-3 font-caveatbrush text-2xl text-gray-600">{article.attributes.author.data.attributes.username}</h1>
                            </div>
                        </div>
                        <div className="mt-4 w-full">
                            <div className="pb-2 text-sm font-medium">
                                <p className="text-gray-600">{article.attributes.author.data.attributes.about}</p>
                                <p className="text-gray-600">This blog written by {article.attributes.author.data.attributes.username} on {formatDate(article.attributes.createdAt)} and below his more blogs.</p>
                            </div>
                            <div>
                            </div>
                            <DisplayMoreArticle
                                username={article.attributes.author.data.attributes.username}
                                slug={article.attributes.Slug}
                            />
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
    const queryString = qs.stringify({
        populate: ['Image', 'author.avatar'],
        filters: {
            Slug: {
                $eq: context.query.article,
            },
        },
    })

    const config = {
        headers: {
            Authorization: `Bearer ${process.env.NEXT_PUBLIC_BASE_API_KEY}`
        }
    }

    const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await axios.get(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/articles?${queryString}`, config)

    if (articles.data.length === 0) {
        return {
            notFound: true,
        }
    }

    return {
        props: {
            article: await serializeMarkdown(articles.data[0])
        }
    }
}